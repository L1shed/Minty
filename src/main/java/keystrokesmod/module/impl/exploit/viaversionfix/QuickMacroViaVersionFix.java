package keystrokesmod.module.impl.exploit.viaversionfix;

import keystrokesmod.event.PreMotionEvent;
import keystrokesmod.event.SendPacketEvent;
import keystrokesmod.mixins.impl.network.C03PacketPlayerAccessor;
import keystrokesmod.mixins.impl.network.C07PacketPlayerDiggingAccessor;
import keystrokesmod.mixins.impl.network.C08PacketPlayerBlockPlacementAccessor;
import keystrokesmod.module.impl.exploit.ViaVersionFix;
import keystrokesmod.module.setting.impl.ButtonSetting;
import keystrokesmod.module.setting.impl.SubMode;
import keystrokesmod.utility.PacketUtils;
import net.minecraft.network.play.client.*;
import net.minecraft.util.BlockPos;
import net.minecraft.util.EnumFacing;
import net.minecraft.util.MathHelper;
import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;
import org.jetbrains.annotations.NotNull;

public class QuickMacroViaVersionFix extends SubMode<ViaVersionFix> {
    private final ButtonSetting fastBreak;
    private final ButtonSetting viaC0B;
    private final ButtonSetting fabricatedPlace;
    private boolean animation = false;

    public QuickMacroViaVersionFix(String name, @NotNull ViaVersionFix parent) {
        super(name, parent);
        this.registerSetting(fastBreak = new ButtonSetting("FastBreak", false));
        this.registerSetting(viaC0B = new ButtonSetting("ViaC0B", true));
        this.registerSetting(fabricatedPlace = new ButtonSetting("FabricatedPlace", true));
    }

    @SubscribeEvent
    public void onPreMotion(PreMotionEvent event) {
        if (viaC0B.isToggled()) {
            if (mc.thePlayer.movementInput.sneak) {
                PacketUtils.sendPacket(new C0BPacketEntityAction(mc.thePlayer, C0BPacketEntityAction.Action.START_SNEAKING));
            } else {
                PacketUtils.sendPacket(new C0BPacketEntityAction(mc.thePlayer, C0BPacketEntityAction.Action.STOP_SNEAKING));
            }
        }
    }

    @SubscribeEvent
    public void onSendPacket(@NotNull SendPacketEvent event) {
        if (this.fastBreak.isToggled()) {
            if (event.getPacket() instanceof C07PacketPlayerDigging) {
                if (((C07PacketPlayerDigging) event.getPacket()).getStatus() == C07PacketPlayerDigging.Action.STOP_DESTROY_BLOCK) {
                    PacketUtils.sendPacket(new C07PacketPlayerDigging(C07PacketPlayerDigging.Action.ABORT_DESTROY_BLOCK, ((C07PacketPlayerDigging) event.getPacket()).getPosition().add(0, 500, 0), ((C07PacketPlayerDigging) event.getPacket()).getFacing()));
                }
            }
        }
        if (this.fabricatedPlace.isToggled()) {
            if (event.getPacket() instanceof C08PacketPlayerBlockPlacement) {
                ((C08PacketPlayerBlockPlacementAccessor) event.getPacket()).setFacingX(0.5F);
                ((C08PacketPlayerBlockPlacementAccessor) event.getPacket()).setFacingY(0.5F);
                ((C08PacketPlayerBlockPlacementAccessor) event.getPacket()).setFacingZ(0.5F);
            }
        }

        if (event.getPacket() instanceof C07PacketPlayerDigging) {
            final C07PacketPlayerDigging p = (C07PacketPlayerDigging) event.getPacket();
            if (p.getStatus() == C07PacketPlayerDigging.Action.RELEASE_USE_ITEM) {
                if (p.getFacing() != EnumFacing.DOWN
                        || p.getPosition().getX() != 0
                        || p.getPosition().getY() != 0
                        || p.getPosition().getZ() != 0) {
                    ((C07PacketPlayerDiggingAccessor) event.getPacket()).setFacing(EnumFacing.DOWN);
                    ((C07PacketPlayerDiggingAccessor) event.getPacket()).setPosition(BlockPos.ORIGIN);
                }
            }
        }
        if (event.getPacket() instanceof C03PacketPlayer.C06PacketPlayerPosLook) {
            final C03PacketPlayer p = (C03PacketPlayer) event.getPacket();
            if (p.getPitch() > 90 || p.getPitch() < -90) {
                ((C03PacketPlayerAccessor) event.getPacket()).setPitch(MathHelper.clamp_float((int) p.getPitch(), -90, 90));
            }
        }
        if (event.getPacket() instanceof C02PacketUseEntity) {
            final C02PacketUseEntity packet = (C02PacketUseEntity) event.getPacket();
            if (packet.getAction() == C02PacketUseEntity.Action.ATTACK) {
                if (animation)
                    animation = false;
                else
                    PacketUtils.sendPacketNoEvent(new C0APacketAnimation());
            }
        }
        if (event.getPacket() instanceof C0APacketAnimation)
            animation = true;
    }
}
