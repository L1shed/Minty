package keystrokesmod.module.impl.exploit.disabler;

import keystrokesmod.event.*;
import keystrokesmod.mixins.impl.network.C0FPacketConfirmTransactionAccessor;
import keystrokesmod.module.impl.exploit.Disabler;
import keystrokesmod.module.impl.exploit.disabler.hypixel.HypixelMotionDisabler;
import keystrokesmod.module.setting.impl.ButtonSetting;
import keystrokesmod.module.setting.impl.LiteralSubMode;
import keystrokesmod.module.setting.impl.ModeValue;
import keystrokesmod.module.setting.impl.SubMode;
import keystrokesmod.utility.PacketUtils;
import net.minecraft.network.play.client.*;
import net.minecraft.network.play.server.S08PacketPlayerPosLook;
import net.minecraft.util.BlockPos;
import net.minecraft.util.EnumFacing;
import net.minecraftforge.fml.common.eventhandler.EventPriority;
import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;
import org.jetbrains.annotations.NotNull;

public class HypixelDisabler extends SubMode<Disabler> {
    public final ModeValue motion;
    private final ButtonSetting cancelSprint;
    private final ButtonSetting c0f;

    public HypixelDisabler(String name, @NotNull Disabler parent) {
        super(name, parent);
        this.registerSetting(motion = new ModeValue("Motion Disabler", this)
                .add(new LiteralSubMode("Disabled", this))
                .add(new HypixelMotionDisabler("Enabled", this))
        );
        this.registerSetting(cancelSprint = new ButtonSetting("Cancel sprint", false));
        this.registerSetting(c0f = new ButtonSetting("C0F", false));
    }

    @Override
    public void onEnable() {
        motion.enable();
    }

    @Override
    public void onDisable() {
        motion.disable();
    }

    @SubscribeEvent(priority = EventPriority.HIGHEST)
    public void onPreMotion(PreMotionEvent event) {
        if (cancelSprint.isToggled())
            event.setSprinting(false);
    }

    @SubscribeEvent(priority = EventPriority.LOWEST)
    public void onReceivePacket(@NotNull ReceivePacketEvent event) {
        if (event.getPacket() instanceof S08PacketPlayerPosLook) {
            if (mc.thePlayer.isUsingItem()) {
                if (mc.thePlayer.isBlocking()) {
                    PacketUtils.sendPacket(new C07PacketPlayerDigging(C07PacketPlayerDigging.Action.RELEASE_USE_ITEM, BlockPos.ORIGIN, EnumFacing.UP));
                } else {
                    mc.playerController.onStoppedUsingItem(mc.thePlayer);
                }
            }
        }
    }

    @SubscribeEvent(priority = EventPriority.LOWEST)
    public void onSendPacket(@NotNull SendPacketEvent event) {
        if (event.getPacket() instanceof C0FPacketConfirmTransaction && c0f.isToggled()) {
            final C0FPacketConfirmTransaction packet = (C0FPacketConfirmTransaction) event.getPacket();
            ((C0FPacketConfirmTransactionAccessor) event.getPacket()).setUid((short) -packet.getUid());
        }
    }
}
