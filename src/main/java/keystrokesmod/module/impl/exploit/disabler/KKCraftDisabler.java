package keystrokesmod.module.impl.exploit.disabler;

import keystrokesmod.event.PreMotionEvent;
import keystrokesmod.event.PreUpdateEvent;
import keystrokesmod.module.impl.exploit.Disabler;
import keystrokesmod.module.impl.other.SlotHandler;
import keystrokesmod.module.setting.impl.ButtonSetting;
import keystrokesmod.module.setting.impl.SubMode;
import keystrokesmod.utility.CoolDown;
import keystrokesmod.utility.PacketUtils;
import keystrokesmod.utility.Utils;
import net.minecraft.client.gui.inventory.GuiChest;
import net.minecraft.network.play.client.C03PacketPlayer;
import net.minecraftforge.event.entity.EntityJoinWorldEvent;
import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;
import net.minecraftforge.fml.common.network.FMLNetworkEvent;
import org.jetbrains.annotations.NotNull;

public class KKCraftDisabler extends SubMode<Disabler> {
    private final ButtonSetting autoBan;

    private State state = State.NONE;
    private final CoolDown joinWorldCoolDown = new CoolDown(1000);

    public KKCraftDisabler(String name, @NotNull Disabler parent) {
        super(name, parent);
        this.registerSetting(autoBan = new ButtonSetting("Auto ban", false));
    }

    @Override
    public void onEnable() {
        state = State.NONE;
    }

    @SubscribeEvent
    public void onPreUpdate(PreUpdateEvent event) {
        if (state == State.JOIN_SERVER && Utils.nullCheck() && mc.playerController != null && !(mc.currentScreen instanceof GuiChest)) {
            if (SlotHandler.getCurrentSlot() != 0) {
                SlotHandler.setCurrentSlot(0);
            } else {
                mc.playerController.sendUseItem(mc.thePlayer, mc.theWorld, SlotHandler.getHeldItem());
            }
        }
    }

    @SubscribeEvent
    public void onDisconnect(FMLNetworkEvent.ClientDisconnectionFromServerEvent event) {
        parent.disable();
    }

    @SubscribeEvent
    public void onPreMotion(PreMotionEvent event) {
        switch (state) {
            case NONE:
                if (autoBan.isToggled()) {
                    PacketUtils.sendPacket(new C03PacketPlayer.C06PacketPlayerPosLook());
                    PacketUtils.sendPacket(new C03PacketPlayer.C06PacketPlayerPosLook());
                    PacketUtils.sendPacket(new C03PacketPlayer.C06PacketPlayerPosLook());
                    PacketUtils.sendPacket(new C03PacketPlayer.C06PacketPlayerPosLook());
                    PacketUtils.sendPacket(new C03PacketPlayer.C06PacketPlayerPosLook());
                    PacketUtils.sendPacket(new C03PacketPlayer.C06PacketPlayerPosLook());
                }
                break;
            case JOIN_SERVER:
                if (mc.currentScreen instanceof GuiChest) {
                    mc.playerController.windowClick(mc.thePlayer.openContainer.windowId, 32, 0, 1, mc.thePlayer);
                }
                break;
        }

    }

    @SubscribeEvent
    public void onEntityJoinWorld(@NotNull EntityJoinWorldEvent event) {
        if (event.entity == mc.thePlayer && joinWorldCoolDown.hasFinished()) {
            switch (state) {
                case NONE:
                    state = State.JOIN_SERVER;
                    joinWorldCoolDown.start();
                    break;
                case JOIN_SERVER:
                    state = State.DONE;
                    break;
            }
        }
    }

    private enum State {
        NONE,
        JOIN_SERVER,
        DONE
    }
}
