package keystrokesmod.module.impl.exploit;

import keystrokesmod.module.Module;
import keystrokesmod.module.impl.exploit.antifalseflag.HypixelAntiFalseFlag;
import keystrokesmod.module.setting.impl.*;
import keystrokesmod.utility.Utils;
import lombok.Data;

import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

public class AntiFalseFlag extends Module {
    private final ModeValue mode;
    private final ButtonSetting message;
    private final ButtonSetting title;
    private final ButtonSetting alarm;
    private final SliderSetting antiSpam;

    private final Map<FlagData, Long> flagCoolDown = new ConcurrentHashMap<>();

    public AntiFalseFlag() {
        super("AntiFalseFlag", category.exploit);
        this.registerSetting(mode = new ModeValue("Mode", this)
                .add(new HypixelAntiFalseFlag("Hypixel", this))
        );
        this.registerSetting(new DescriptionSetting("Notification"));
        this.registerSetting(message = new ButtonSetting("Message", true));
        this.registerSetting(title = new ButtonSetting("Title", false));
        this.registerSetting(alarm = new ButtonSetting("Alarm", false));
        this.registerSetting(antiSpam = new SliderSetting("Anti spam", 1, 0.1, 5, 0.1, "seconds"));
    }

    @Override
    public void onUpdate() throws Exception {
        final long time = System.currentTimeMillis();
        final long coolDown = (long) (antiSpam.getInput() * 1000);
        for (Map.Entry<FlagData, Long> entry : flagCoolDown.entrySet()) {
            if (entry.getKey().mode != mode.getSelected())
                flagCoolDown.remove(entry.getKey());

            if (time - entry.getValue() >= coolDown)
                flagCoolDown.remove(entry.getKey());
        }
    }

    public void flag(String checkName, String helpMessage) {
        Utils.sendMessage("flag");
        final FlagData data = new FlagData(mode.getSelected(), checkName, helpMessage);
        if (flagCoolDown.containsKey(data)) {
            flagCoolDown.put(data, System.currentTimeMillis());
            return;
        }
        flagCoolDown.put(data, System.currentTimeMillis());

        if (message.isToggled()) {
            Utils.sendRawMessage(String.format("%s§r §r%s§r %s§r §b%s§r | %s§r", "§b§lAntiFalseFlag§r§l>", "You", "failed", checkName, helpMessage));
        }
        if (title.isToggled()) {
            mc.ingameGUI.displayTitle("", "⚠ You may be flagged", 10, 10, 10);
        }
        if (alarm.isToggled()) {
            mc.thePlayer.playSound("keystrokesmod:alarm", 1, 1);
        }
    }

    @Data
    private static class FlagData {
        private final SubMode<?> mode;
        private final String checkName;
        private final String helpMessage;
    }

    @Override
    public void onEnable() throws Exception {
        mode.enable();
    }

    @Override
    public void onDisable() throws Exception {
        mode.disable();
        flagCoolDown.clear();
    }

    @Override
    public String getInfo() {
        return mode.getSelected().getPrettyName();
    }
}
