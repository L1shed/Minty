package keystrokesmod.module.impl.exploit.remoteshop;

import keystrokesmod.event.PostMotionEvent;
import keystrokesmod.event.PreMotionEvent;
import keystrokesmod.event.SendPacketEvent;
import keystrokesmod.module.impl.client.Notifications;
import keystrokesmod.module.impl.exploit.RemoteShop;
import keystrokesmod.utility.MoveUtil;
import keystrokesmod.utility.PacketUtils;
import net.minecraft.client.gui.inventory.GuiChest;
import net.minecraft.network.play.client.C0DPacketCloseWindow;
import net.minecraft.network.play.client.C0EPacketClickWindow;
import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;
import org.jetbrains.annotations.NotNull;

import java.util.Queue;
import java.util.concurrent.ConcurrentLinkedQueue;

public class HypixelRemoteShop extends IRemoteShop {
    private boolean lastStop = false;
    private final Queue<C0EPacketClickWindow> delayedPacket = new ConcurrentLinkedQueue<>();

    public HypixelRemoteShop(String name, @NotNull RemoteShop parent) {
        super(name, parent);
    }

    @SubscribeEvent
    public void onPreMotion(PreMotionEvent event) {
        if (mc.currentScreen == cacheShop && cacheShop != null) {
            synchronized (delayedPacket) {
                for (C0EPacketClickWindow p : delayedPacket) {
                    PacketUtils.sendPacketNoEvent(p);
                }
                delayedPacket.clear();
            }
        } else {
            delayedPacket.clear();
        }
    }

    @SubscribeEvent
    public void onPostMotion(PostMotionEvent event) {
        if (lastStop) {
            MoveUtil.stop();
            lastStop = false;
        }
    }

    @Override
    public void openContainer() {
        super.openContainer();
    }

    @Override
    public void remoteShop() {
        MoveUtil.stop();
        super.remoteShop();
    }

    @SubscribeEvent
    public void onSendPacket(SendPacketEvent event) {
        if (mc.currentScreen == cacheShop && cacheShop != null) {
            if (event.getPacket() instanceof C0EPacketClickWindow) {
                if (!lastStop) {
                    MoveUtil.stop();
                    lastStop = true;
                    delayedPacket.add((C0EPacketClickWindow) event.getPacket());
                    event.setCanceled(true);
                } else if (!delayedPacket.isEmpty()) {
                    delayedPacket.add((C0EPacketClickWindow) event.getPacket());
                    event.setCanceled(true);
                }
            } else if (event.getPacket() instanceof C0DPacketCloseWindow) {
                event.setCanceled(true);
            }
        }
    }

    @Override
    public void onDisable() throws Throwable {
        lastStop = false;
        delayedPacket.clear();
    }
}
